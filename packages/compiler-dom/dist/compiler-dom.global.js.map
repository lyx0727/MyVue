{
  "version": 3,
  "sources": ["../src/index.ts", "../../compiler-core/src/parse.ts", "../../compiler-core/src/compile.ts"],
  "sourcesContent": ["import { baseCompile } from \"@vue/compiler-core\";\r\n\r\nexport function compile(template:any){\r\n    return baseCompile(template);\r\n}", "import { NodeTypes } from \"./ast\";\r\n\r\nfunction createParserContext(template:any){\r\n    return {\r\n        line: 1,\r\n        column: 1,\r\n        offset: 0,\r\n        source: template,\r\n        originalSource: template\r\n    }\r\n}\r\n\r\nfunction isEnd(context:any){\r\n    return !context.source;\r\n}\r\n\r\nfunction getCursor(context:any){\r\n    let {line, column, offset} = context;\r\n    return {line, column, offset};\r\n}\r\n\r\nfunction advancePositionWithMutation(context:any, source:any, endIndex:any){\r\n    let linesCount = 0;\r\n    let linePos = -1;\r\n    for(let i = 0; i < endIndex; i++){\r\n        // '\\n'\r\n        if(source.charCodeAt(i) == 10){\r\n            linesCount++;\r\n            linePos = i;\r\n        }\r\n    }\r\n    context.offset += endIndex;\r\n    context.line += linesCount;\r\n    context.column = \r\n        linePos === -1\r\n        ? context.column + endIndex \r\n        : endIndex - linePos;\r\n}\r\n\r\nfunction advanceBy(context:any, endIndex:any){\r\n    let source = context.source;\r\n    advancePositionWithMutation(context, source, endIndex);\r\n\r\n    context.source = source.slice(endIndex);\r\n}\r\n\r\nfunction getSelection(context:any, start:any, end?:any){\r\n    end = end || getCursor(context);\r\n    return {\r\n        start,\r\n        end,\r\n        source: context.originalSource.slice(start.offset, end.offset)\r\n    }\r\n}   \r\n\r\nexport function baseParse(template:any){\r\n    const context = createParserContext(template);\r\n\r\n    const nodes:any = [];\r\n    while(!isEnd(context)){\r\n        let node = null;\r\n        const source = context.source;\r\n        // \r\n        if(source.startsWith('{{')){\r\n\r\n        }\r\n        // tag\r\n        else if(source.startsWith('<')){\r\n\r\n        }\r\n        // text\r\n        if(!node){\r\n            node = parseText(context);\r\n        }\r\n        nodes.push(node);\r\n        break;\r\n    }\r\n    return nodes;\r\n}\r\n\r\nfunction parseTextData(context:any, endIndex:any){\r\n    const rawText = context.source.slice(0, endIndex);\r\n    advanceBy(context, endIndex);\r\n    return rawText;\r\n}\r\n\r\nfunction parseText(context:any){\r\n    const endTokens = ['<', '{{'];\r\n    const source = context.source;\r\n    let endIndex = source.length;\r\n\r\n    // find first end token\r\n    for(let i = 0; i < endTokens.length; i++){\r\n        let index = source.indexOf(endTokens[i]);\r\n        if(index !== -1 && endIndex > index){\r\n            endIndex = index;\r\n        }\r\n    }\r\n\r\n    const start = getCursor(context);\r\n    const content = parseTextData(context, endIndex);\r\n\r\n    return{\r\n        type: NodeTypes.TEXT,\r\n        content,\r\n        loc:getSelection(context, start)\r\n    }\r\n}   ", "import { baseParse } from \"./parse\"\r\n\r\nexport function baseCompile(template: any){\r\n    const ast = baseParse(template);\r\n    return ast;\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACEA,+BAA6B,UAAa;AACtC,WAAO;AAAA,MACH,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,gBAAgB;AAAA,IACpB;AAAA,EACJ;AAEA,iBAAe,SAAY;AACvB,WAAO,CAAC,QAAQ;AAAA,EACpB;AAEA,qBAAmB,SAAY;AAC3B,QAAI,EAAC,MAAM,QAAQ,WAAU;AAC7B,WAAO,EAAC,MAAM,QAAQ,OAAM;AAAA,EAChC;AAEA,uCAAqC,SAAa,QAAY,UAAa;AACvE,QAAI,aAAa;AACjB,QAAI,UAAU;AACd,aAAQ,IAAI,GAAG,IAAI,UAAU,KAAI;AAE7B,UAAG,OAAO,WAAW,CAAC,KAAK,IAAG;AAC1B;AACA,kBAAU;AAAA,MACd;AAAA,IACJ;AACA,YAAQ,UAAU;AAClB,YAAQ,QAAQ;AAChB,YAAQ,SACJ,YAAY,KACV,QAAQ,SAAS,WACjB,WAAW;AAAA,EACrB;AAEA,qBAAmB,SAAa,UAAa;AACzC,QAAI,SAAS,QAAQ;AACrB,gCAA4B,SAAS,QAAQ,QAAQ;AAErD,YAAQ,SAAS,OAAO,MAAM,QAAQ;AAAA,EAC1C;AAEA,wBAAsB,SAAa,OAAW,KAAS;AACnD,UAAM,OAAO,UAAU,OAAO;AAC9B,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA,QAAQ,QAAQ,eAAe,MAAM,MAAM,QAAQ,IAAI,MAAM;AAAA,IACjE;AAAA,EACJ;AAEO,qBAAmB,UAAa;AACnC,UAAM,UAAU,oBAAoB,QAAQ;AAE5C,UAAM,QAAY,CAAC;AACnB,WAAM,CAAC,MAAM,OAAO,GAAE;AAClB,UAAI,OAAO;AACX,YAAM,SAAS,QAAQ;AAEvB,UAAG,OAAO,WAAW,IAAI,GAAE;AAAA,MAE3B,WAEQ,OAAO,WAAW,GAAG,GAAE;AAAA,MAE/B;AAEA,UAAG,CAAC,MAAK;AACL,eAAO,UAAU,OAAO;AAAA,MAC5B;AACA,YAAM,KAAK,IAAI;AACf;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAEA,yBAAuB,SAAa,UAAa;AAC7C,UAAM,UAAU,QAAQ,OAAO,MAAM,GAAG,QAAQ;AAChD,cAAU,SAAS,QAAQ;AAC3B,WAAO;AAAA,EACX;AAEA,qBAAmB,SAAY;AAC3B,UAAM,YAAY,CAAC,KAAK,IAAI;AAC5B,UAAM,SAAS,QAAQ;AACvB,QAAI,WAAW,OAAO;AAGtB,aAAQ,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAI;AACrC,UAAI,QAAQ,OAAO,QAAQ,UAAU,EAAE;AACvC,UAAG,UAAU,MAAM,WAAW,OAAM;AAChC,mBAAW;AAAA,MACf;AAAA,IACJ;AAEA,UAAM,QAAQ,UAAU,OAAO;AAC/B,UAAM,UAAU,cAAc,SAAS,QAAQ;AAE/C,WAAM;AAAA,MACF,MAAM;AAAA,MACN;AAAA,MACA,KAAI,aAAa,SAAS,KAAK;AAAA,IACnC;AAAA,EACJ;;;ACzGO,uBAAqB,UAAc;AACtC,UAAM,MAAM,UAAU,QAAQ;AAC9B,WAAO;AAAA,EACX;;;AFHO,mBAAiB,UAAa;AACjC,WAAO,YAAY,QAAQ;AAAA,EAC/B;",
  "names": []
}
